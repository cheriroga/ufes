# Definindo o número de passos
n <- 1000
# Gerando os passos aleatórios: cada passo é -1 ou +1 com probabilidade 0.5
passos <- sample(c(-1, 1), n, replace = TRUE)
# Calculando o caminho aleatório (soma acumulada dos passos)
caminho <- cumsum(passos)
# Plotando o caminho aleatório
plot(caminho, type = "l", col = "blue", lwd = 2, xlab = "Número de Passos", ylab = "Posição", main = "Caminho Aleatório 1D")
# Definindo o número de passos e o número de trajetórias
n <- 1000
trajetorias <- 100
# Inicializando a matriz para armazenar as trajetórias
caminhos <- matrix(0, nrow = n, ncol = trajetorias)
# Simulando as trajetórias
for (i in 1:trajetorias) {
# Gerando os passos aleatórios para cada trajetória
passos <- sample(c(-1, 1), n, replace = TRUE)
# Calculando o caminho acumulado (soma dos passos)
caminhos[, i] <- cumsum(passos)
}
# Plotando as 100 trajetórias
matplot(1:n, caminhos, type = "l", col = rainbow(trajetorias), lwd = 1, xlab = "Número de Passos", ylab = "Posição", main = "100 Trajetórias de Caminho Aleatório 1D")
# Plotando as 100 trajetórias
matplot(1:3, caminhos, type = "l", col = rainbow(trajetorias), lwd = 1, xlab = "Número de Passos", ylab = "Posição", main = "100 Trajetórias de Caminho Aleatório 1D")
# Plotando as 100 trajetórias
matplot(1:56, caminhos, type = "l", col = rainbow(trajetorias), lwd = 1, xlab = "Número de Passos", ylab = "Posição", main = "100 Trajetórias de Caminho Aleatório 1D")
# Definindo o número de passos e o número de trajetórias
n <- 1000
trajetorias <- 100
# Inicializando a matriz para armazenar as trajetórias
caminhos <- matrix(0, nrow = n, ncol = trajetorias)
# Simulando as trajetórias
for (i in 1:trajetorias) {
# Gerando os passos aleatórios para cada trajetória
passos <- sample(c(-1, 1), n, replace = TRUE)
# Calculando o caminho acumulado (soma dos passos)
caminhos[, i] <- cumsum(passos)
}
# Plotando as 100 trajetórias
matplot(1:56, caminhos, type = "l", col = rainbow(trajetorias), lwd = 1, xlab = "Número de Passos", ylab = "Posição", main = "100 Trajetórias de Caminho Aleatório 1D")
# Inicializando um vetor para armazenar as distâncias das trajetórias
distancias <- numeric(trajetorias)
# Simulando as trajetórias e calculando as distâncias
for (i in 1:trajetorias) {
# Gerando os passos aleatórios para cada trajetória
passos <- sample(c(-1, 1), n, replace = TRUE)
# Calculando a posição final
posicao_final <- sum(passos)
# Calculando a distância em relação à origem (valor absoluto da posição final)
distancias[i] <- abs(posicao_final)
}
# Calculando a distância média
distancia_media <- mean(distancias)
# Exibindo o resultado
distancia_media
# Definindo o número de amostras e o intervalo
n <- 10000
a <- 0
b <- pi
# Gerando n valores uniformemente distribuídos em [0, pi]
x_values <- runif(n, min = a, max = b)
# Calculando o valor médio de f(x) = sin(x)
f_values <- sin(x_values)
# Estimando a integral
integral_estimate <- (b - a) * mean(f_values)
# Exibindo o resultado
integral_estimate
caminhos
head(caminhos)
summary(caminhos)
# Plotando as 100 trajetórias
matplot(1:56, caminhos, type = "l", col = rainbow(trajetorias), lwd = 1, xlab = "Número de Passos", ylab = "Posição", main = "100 Trajetórias de Caminho Aleatório 1D")
# Plotando as 100 trajetórias
matplot(1:56, caminhos, type = "l", col = rainbow(trajetorias), lwd = 1, xlab = "Número de Passos", ylab = "Posição", main = "100 Trajetórias de Caminho Aleatório 1D")
# Plotando as 100 trajetórias
matplot(1:n, caminhos, type = "l", col = rainbow(trajetorias), lwd = 1, xlab = "Número de Passos", ylab = "Posição", main = "100 Trajetórias de Caminho Aleatório 1D")
# Plotando as 100 trajetórias
matplot(1:n, caminhos, type = "l", col = rainbow(trajetorias), lwd = 1, xlab = "Número de Passos", ylab = "Posição", main = "100 Trajetórias de Caminho Aleatório 1D")
# Plotando as 100 trajetórias
matplot(1:n, caminhos, type = "l", col = rainbow(trajetorias), lwd = 1, xlab = "Número de Passos", ylab = "Posição", main = "100 Trajetórias de Caminho Aleatório 1D")
# Definindo o número de passos e o número de trajetórias
n <- 1000
trajetorias <- 100
# Inicializando a matriz para armazenar as trajetórias
caminhos <- matrix(0, nrow = n, ncol = trajetorias)
# Simulando as trajetórias
for (i in 1:trajetorias) {
# Gerando os passos aleatórios para cada trajetória
passos <- sample(c(-1, 1), n, replace = TRUE)
# Calculando o caminho acumulado (soma dos passos)
caminhos[, i] <- cumsum(passos)
}
# Plotando as 100 trajetórias
matplot(1:n, caminhos, type = "l", col = rainbow(trajetorias), lwd = 1, xlab = "Número de Passos", ylab = "Posição", main = "100 Trajetórias de Caminho Aleatório 1D")
# Definindo o número de amostras e o intervalo
n <- 10000
a <- 0
b <- pi
# Gerando n valores uniformemente distribuídos em [0, pi]
x_values <- runif(n, min = a, max = b)
# Avaliando f(x) = sin(x) para cada valor gerado
f_values <- sin(x_values)
# Estimando a integral como a média de f(x) multiplicada pelo comprimento do intervalo
integral_estimate <- (b - a) * mean(f_values)
# Valor exato da integral
exact_value <- 2
# Exibindo os resultados
cat("Estimativa da integral:", integral_estimate, "\n")
cat("Valor exato da integral:", exact_value, "\n")
cat("Erro absoluto:", abs(integral_estimate - exact_value), "\n")
# Definir parâmetros
n <- 1000  # Número de passos
m <- 100   # Número de trajetórias a serem simuladas
# Função para simular uma trajetória de caminho aleatório
simulate_walk <- function(n) {
# Cada passo é +1 ou -1 com probabilidade 0,5
steps <- sample(c(-1, 1), size = n, replace = TRUE)
# Soma dos passos para obter a trajetória
walk <- cumsum(steps)
return(walk)
}
# Simular 100 trajetórias
trajectories <- replicate(m, simulate_walk(n))
# Plotar algumas trajetórias
set.seed(42)  # Definir semente para reprodutibilidade
plot(trajectories[,1], type = "l", col = "blue", xlab = "Passos", ylab = "Posição",
main = "Trajetórias de Caminho Aleatório (1D)")
for (i in 2:10) {  # Plotar as primeiras 10 trajetórias
lines(trajectories[, i], col = rgb(0, 0, 1, alpha = 0.1))  # Trajetórias em azul com transparência
}
grid()
# Calcular a distância média do ponto de origem após n passos
final_positions <- trajectories[n, ]  # Posições finais após n passos
mean_distance <- mean(abs(final_positions))  # Distância média do ponto de origem
# Exibir a distância média
cat("Distância média do ponto de origem após", n, "passos:", mean_distance, "\n")
# Plotando as 100 trajetórias
matplot(1:n, caminhos, type = "l", col = rainbow(trajetorias),
lwd = 1, xlab = "Número de Passos", ylab = "Posição",
main = "100 Trajetórias de Caminho Aleatório 1D")
# Definir o número de amostras
n <- 100000
# Gerar n pares de coordenadas uniformemente distribuídas em [0, 1] x [0, 1]
x <- runif(n, min = 0, max = 1)
y <- runif(n, min = 0, max = 1)
# Calcular a fração de pontos dentro do círculo
inside_circle <- (x^2 + y^2) <= 1
fraction_inside_circle <- mean(inside_circle)
# Estimar pi
pi_estimate <- 4 * fraction_inside_circle
# Exibir o resultado
cat("Estimativa de pi:", pi_estimate, "\n")
cat("Valor exato de pi:", pi, "\n")
cat("Erro absoluto:", abs(pi_estimate - pi), "\n")
